<?php
declare(strict_types=1);

namespace MixerApi\Rest\Lib\Middleware;

use Cake\Core\Configure;
use Cake\Routing\RouteBuilder;
use Cake\Routing\Router;
use Cake\Routing\RouteCollection;
use MixerApi\Rest\Lib\Controller\ReflectedControllerDecorator;
use MixerApi\Rest\Lib\Route\ResourceScanner;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface;

class AutoRoutingMiddleware implements MiddlewareInterface
{
    /**
     * @var string
     */
    private $namespace;

    /**
     * @var string
     */
    private $plugin;

    /**
     * @var string
     */
    private $path;

    /**
     * @param array $options options for middleware
     * @example $options = ['namespace' => 'Admin\Controller', 'path' => '/admin', 'plugin' => 'Admin']
     */
    public function __construct(array $options = [])
    {
        $this->namespace = $options['namespace'] ?? Configure::read('App.namespace') . '\Controller';
        $this->path = $options['path'] ?? '/';
        $this->plugin = $options['plugin'] ?? null;
    }

    /**
     * Apply routing and update the request.
     *
     * Any route/path specific middleware will be wrapped around $next and then the new middleware stack will be
     * invoked.
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request The request.
     * @param \Psr\Http\Server\RequestHandlerInterface $handler The request handler.
     * @return \Psr\Http\Message\ResponseInterface A response.
     * @throws \ReflectionException
     */
    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface
    {
        $collection = Router::getRouteCollection();
        $builder = new RouteBuilder($collection, $this->path);

        if (is_string($this->plugin)) {
            //$this->plugin($collection, $builder);
            $this->scope($collection, $builder);
        } else {
            $this->scope($collection, $builder);
        }

        return $handler->handle($request);
    }

    /**
     * Creates a RouteBuilder::scope
     *
     * @param RouteCollection $collection
     * @param RouteBuilder $builder
     */
    private function scope(RouteCollection $collection, RouteBuilder $builder): void
    {
        $builder->scope($this->path, function (RouteBuilder $builder) {
            $resources = (new ResourceScanner($this->namespace))->getControllerDecorators();
            foreach ($resources as $resource) {
                if (!$resource->hasCrud()) {
                    continue;
                }

                $builder = $this->buildRouteBuilder($builder, $resource);
            }
        });
    }

    /**
     * Creates a RouteBuilder::plugin
     *
     * @param RouteCollection $collection
     * @param RouteBuilder $builder
     */
    private function plugin(RouteCollection $collection, RouteBuilder $builder): void
    {
        Router::plugin($this->plugin, ['path' => $this->path], function (RouteBuilder $builder) {
            $resources = (new ResourceScanner($this->namespace))->getControllerDecorators();
            foreach ($resources as $resource) {
                if (!$resource->hasCrud()) {
                    continue;
                }

                $builder = $this->buildRouteBuilder($builder, $resource);
            }
        });
    }

    /**
     * Builds a RouteBuilder
     *
     * @param RouteBuilder $builder
     * @param ReflectedControllerDecorator $resource
     * @return RouteBuilder|null
     */
    private function buildRouteBuilder(RouteBuilder $builder, ReflectedControllerDecorator $resource): RouteBuilder
    {
        $paths = $resource->getPaths($this->namespace);

        if (empty($paths)) {
            $builder->resources($resource->getResourceName());

            return $builder;
        }

        $builder->resources($resource->getResourceName(), [
            'path' => $resource->getPathTemplate($this->namespace),
            'prefix' => end($paths),
        ]);

        return $builder;
    }
}
